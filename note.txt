- when to use params vs queryString: https://stackoverflow.com/a/31261026/14723731
    - TLDR: params is to get resource/resource, queryString is used for filtering
- https://www.freecodecamp.org/news/rest-api-best-practices-rest-endpoint-design-examples/
- https://dev.to/larswaechter/how-i-structure-my-rest-apis-11k4
- https://www.freecodecamp.org/news/rest-api-best-practices-rest-endpoint-design-examples/
- utils are for generic and reuseable functions
- middlewares are for specific routes, involving more in requests and responses   
- https://stackoverflow.com/q/18875292/14723731, pass data through the next middlewares uses res.locals
- should add a "return" for the next(), I encoutered the "header returns twice" situation where there is a next() under the next(error)
because although the next(error) directs to the error middleware, the code continue to run to the next() below, and so it returns twice,
the same situation here https://stackoverflow.com/q/77589461/14723731 even though this has "return", the stack has a good answer but I 
will make a TLDR one, .catch() is async, while fetch was resolving, the data is still undefined and we send an error response, 
when the fetch is resolved and if there are any errors, we send another error response, this make the response twice
- https://stackoverflow.com/q/19599543/14723731, mongoose ready state
- https://www.npmjs.com/package/mongoose#importing, usually you use await, but this link allow you to use .then(), but basically they
are kinda the same because they are both used to handle async operations
- in the official docs, you dont need await, but you need it in npmjs docs and you can use await and .then()
- mongoose find by: https://mongoosejs.com/docs/queries.html
- I have a commit version where the getAccountInformation function doesn't return accountPassword, the commit code is "ab447f4"
or "ab447f40a562a7f0e8e03bd9b7a97d12f95c8ce4"
- Renovation point: https://github.com/TonyH0401/posting-blog-be/tree/5e22c8a1b543e3040305be410dc4fa2a2cdc4865
- Knowing that Nodejs goes from top to bottom in order, if you have /:id and /demo (in this order) it won't run /demo, it'll run 
/:id every single time because you have changed the value of the params of /:id (which is :id) to the value "demo", 
so everytime it will run to /:id but with "demo" as the value. But if you change the order to /demo and then /:id then it will run 
both /demo and /:id separately. For example, "localhost:8080/api/v1/urls/url/demo" this will not run to /demo, it will run to
/:id but with params value being "demo". Be carefule with anything params. If i have /:id, when I call /demo, /:id will be called
but if i call /demo/demo then /demo/demo will be called not /:id
- note for using multer. when uploading file, remember to have the correct property name because if not you will meet with
Unpected field error. when not uploading file, it doesn't matter whether the property name is correct or appear at all 
the property name will not be used but the process will continue so don't worry
